https://www.codeproject.com/Articles/36530/An-Introduction-to-Iterator-Traits
https://www.cplusplus.com/reference/iterator/

**********************************
**			Iterator(base)		**
**********************************
[v]  copy-constructible, copy-assignable and destructible
		X b(a);
		b = a;
[v]  Can be incremented
	 	++a;
		a++;

**************************************************
**		BidirectionalIterator : public Iterator	**
**************************************************
[v]	default-constructible 
		X a;
		X();

[v]  Can be compared for equivalence using the equality/inequality operators.
	(meaningful when both iterator values iterate over the same underlying sequence.)
		a == b
		a != b
[v]  Can be dereferenced as an rvalue (if in a dereferenceable state).
		*a
		a->m
[v]  For mutable iterators (non-constant iterators):
	Can be dereferenced as an lvalue (if in a dereferenceable state).
		*a = t
[v]  Can be incremented (if in a dereferenceable state).
	The result is either also dereferenceable or a past-the-end iterator.
	Two iterators that compare equal, keep comparing equal after being both increased.
		++a
		a++
		*a++
[v]  Can be decremented (if a dereferenceable iterator value precedes it).
		--a
		a--
		*a--

**************************************************************
**		RandomAccessIterator : public BidirectionalIterator	**
**************************************************************
[v]  Supports the arithmetic operators + and - between an iterator and an integer value,
	or subtracting an iterator from another.
		a + n
		n + a
		a - n
		a - b
[v]  Can be compared with inequality relational operators (<, >, <= and >=).
		a < b
		a > b
		a <= b
		a >= b
[v]  Supports compound assignment operations += and -=
		a += n
		a -= n
[v]  Supports the offset dereference operator ([])
		a[n]
